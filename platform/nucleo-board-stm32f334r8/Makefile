################################################################################

PROJNAME = bootloader

# where to place the build files
BUILD_DIR = build

# platform specific source files
PLATFORM_CSRC = platform.c

PROJ_ROOT = ../..
PLATFORM_PATH = platform/nucleo-board-stm32f334r8/

# QUIET = 1: dont show compiler calls
QUIET = 0

################################################################################

CC  = arm-none-eabi-gcc
CXX = arm-none-eabi-g++
AS  = arm-none-eabi-gcc -x assembler-with-cpp
LD  = arm-none-eabi-g++
AR  = arm-none-eabi-ar
OC  = arm-none-eabi-objcopy
OD  = arm-none-eabi-objdump
NM  = arm-none-eabi-nm
SZ  = arm-none-eabi-size

MKDIR = mkdir -p

ifdef NO_COLOR
PRINT = @printf "%s\n"
else
ANSI_RED = \033[1;31m
ANSI_RESET = \033[0m
PRINT = @printf "$(ANSI_RED)%s$(ANSI_RESET)\n"
endif

ifeq ($(QUIET),1)
Q = @
endif

################################################################################

# Generated byte packager from template include.jinja
include include.mk

CSRC     += $(addprefix $(PLATFORM_PATH), $(PLATFORM_CSRC))

# Includes
INCDIR   = ./ $(PROJ_ROOT)/libopencm3/include $(PROJ_ROOT)/
INCDIR   += $(addprefix $(PROJ_ROOT)/, $(PACKAGER_INCDIR))

LDSCRIPT = ./linkerscript.ld

# Target processor
CFLAGS += -mthumb -march=armv7e-m -mtune=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16
LFLAGS += -mthumb -march=armv7e-m -mtune=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16

DEFINES += -DSTM32F3
OPTIMIZATION = -Og
DEBUGGING = -g
WARNINGS = -Wall -Wextra -Wno-unused-parameter

# C & C++ compiler flags
#CFLAGS   += -fno-common
#CFLAGS   += -ffunction-sections
#CFLAGS   += -fdata-sections
#CFLAGS   += -fno-exceptions
#CFLAGS   += -fomit-frame-pointer
CFLAGS   += $(OPTIMIZATION)
CFLAGS   += $(WARNINGS)
CFLAGS   += $(DEBUGGING)
CFLAGS   += $(DEFINES)
# Create header inclusion dependency files (*.d)
CFLAGS   += -MD
CFLAGS   += $(addprefix  -I, $(INCDIR))

# C only flags
CCFLAGS += -std=gnu11
#CCFLAGS  += -Wstrict-prototypes

# C++ only flags
#CXXFLAGS += -fno-rtti
#CXXFLAGS += -fno-exceptions
#CXXFLAGS += -fno-unwind-tables
#CXXFLAGS += -fno-use-cxa-atexit

# Libraries to link with
LIBOPENCM3 = opencm3_stm32f3
LIBOPENCM3_PATH = $(PROJ_ROOT)/libopencm3
LIBOPENCM3_LD = $(LIBOPENCM3_PATH)/lib/lib$(LIBOPENCM3).ld

LIBS     += -Wl,-lc -Wl,-lgcc -Wl,-lnosys
LIBS     += -Wl,-L$(LIBOPENCM3_PATH)/lib
LIBS     += -Wl,-l$(LIBOPENCM3)

# Linker flags
LFLAGS   += -nostartfiles
LFLAGS   += $(LIBS)
LFLAGS   += -Wl,-Map=$(PROJNAME).map
LFLAGS   += -T$(LDSCRIPT)
LFLAGS   += $(OPTIMIZATION)

CCFLAGS  += $(CFLAGS)
CXXFLAGS += $(CFLAGS)
ASMFLAGS += $(CFLAGS)

COBJS = $(addprefix $(BUILD_DIR)/, $(CSRC:.c=.o))
ASMOBJS = $(addprefix $(BUILD_DIR)/, $(ASMSRC:.s=.o))
CXXOBJS = $(addprefix $(BUILD_DIR)/, $(CXXSRC:.cpp=.o))

OBJS = $(COBJS) $(ASMOBJS) $(CXXOBJS)

################################################################################

.PHONY: all
all: $(PROJNAME).bin $(PROJNAME).lst $(PROJNAME).size.txt Makefile
	$(PRINT) "> done: $(PROJNAME)"
	@ $(SZ) $(PROJNAME).elf

.PHONY: clean
clean:
	$(Q)-rm -fr $(BUILD_DIR)
	$(Q)-rm -f $(OBJS)
	$(Q)-rm -f $(OBJS:.o=.lst)
	$(Q)-rm -f $(OBJS:.o=.d)
	$(Q)-rm -f $(PROJNAME).elf
	$(Q)-rm -f $(PROJNAME).bin
	$(Q)-rm -f $(PROJNAME).lst
	$(Q)-rm -f $(PROJNAME).map
	$(Q)-rm -f $(PROJNAME).size.txt

.PHONY: rebuild
rebuild: clean all

# targets for flashing with openocd
.PHONY: flash
flash: all
	openocd -f oocd.cfg -c "program $(PROJNAME).elf verify reset" -c "shutdown"

.PHONY: reset
reset:
	openocd -f oocd.cfg -c "init" -c "reset" -c "shutdown"

################################################################################

# OpenCM3 library
$(LIBOPENCM3):
	cd $(LIBOPENCM3_PATH); make

# linked elf-object
$(PROJNAME).elf: $(OBJS) $(LDSCRIPT) $(LIBOPENCM3_LD)
	$(PRINT) "> linking"
	$(Q) $(LD) -o $(PROJNAME).elf $(OBJS) $(LFLAGS)

# binary
$(PROJNAME).bin: $(PROJNAME).elf
	$(PRINT) "> copying"
	$(Q) $(OC) -Obinary -j .text -j .rodata -j .data $(PROJNAME).elf $(PROJNAME).bin

# assembly listing
$(PROJNAME).lst: $(PROJNAME).elf
	$(PRINT) "> generating assembly listing"
	$(Q) $(OD) -D -h $(PROJNAME).elf > $(PROJNAME).lst

# object from c
$(COBJS): $(BUILD_DIR)/%.o : $(PROJ_ROOT)/%.c Makefile
	$(Q) $(MKDIR) $(shell dirname ${@})
	$(PRINT) "> compiling ("$<")"
	$(Q) $(CC) $(CCFLAGS) -Wa,-ahlms=$(@:.o=.lst) -o ${@} -c ${<}

# object from asm
$(ASMOBJS): $(BUILD_DIR)/%.o : $(PROJ_ROOT)/%.s Makefile
	$(Q) $(MKDIR) $(shell dirname ${@})
	$(PRINT) "> assembling ("$<")"
	$(Q) $(AS) $(ASMFLAGS) -c ${<} -o ${@}

# object from c++
$(CXXOBJS): $(BUILD_DIR)/%.o : $(PROJ_ROOT)/%.cpp Makefile
	$(Q) $(MKDIR) $(shell dirname ${@})
	$(PRINT) "> compiling ("$<")"
	$(Q) $(CXX) $(CXXFLAGS) -Wa,-ahlms=$(@:.o=.lst) -o ${@} -c ${<}

# space usage
$(PROJNAME).size.txt: $(PROJNAME).elf
	$(PRINT) "> calculating space usage"
	$(Q)$(SZ) $(PROJNAME).elf > $(PROJNAME).size.txt
	$(Q)$(NM) --size-sort --print-size -S $(PROJNAME).elf >> $(PROJNAME).size.txt
